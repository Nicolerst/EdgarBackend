require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe CodeSessionsController do

  def mock_code_session(stubs={})
    @mock_code_session ||= mock_model(CodeSession, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all code_sessions as @code_sessions" do
      CodeSession.stub(:all) { [mock_code_session] }
      get :index
      assigns(:code_sessions).should eq([mock_code_session])
    end
  end

  describe "GET show" do
    it "assigns the requested code_session as @code_session" do
      CodeSession.stub(:find).with("37") { mock_code_session }
      get :show, :id => "37"
      assigns(:code_session).should be(mock_code_session)
    end
  end

  describe "GET new" do
    it "assigns a new code_session as @code_session" do
      CodeSession.stub(:new) { mock_code_session }
      get :new
      assigns(:code_session).should be(mock_code_session)
    end
  end

  describe "GET edit" do
    it "assigns the requested code_session as @code_session" do
      CodeSession.stub(:find).with("37") { mock_code_session }
      get :edit, :id => "37"
      assigns(:code_session).should be(mock_code_session)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created code_session as @code_session" do
        CodeSession.stub(:new).with({'these' => 'params'}) { mock_code_session(:save => true) }
        post :create, :code_session => {'these' => 'params'}
        assigns(:code_session).should be(mock_code_session)
      end

      it "redirects to the created code_session" do
        CodeSession.stub(:new) { mock_code_session(:save => true) }
        post :create, :code_session => {}
        response.should redirect_to(code_session_url(mock_code_session))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved code_session as @code_session" do
        CodeSession.stub(:new).with({'these' => 'params'}) { mock_code_session(:save => false) }
        post :create, :code_session => {'these' => 'params'}
        assigns(:code_session).should be(mock_code_session)
      end

      it "re-renders the 'new' template" do
        CodeSession.stub(:new) { mock_code_session(:save => false) }
        post :create, :code_session => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested code_session" do
        CodeSession.stub(:find).with("37") { mock_code_session }
        mock_code_session.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :code_session => {'these' => 'params'}
      end

      it "assigns the requested code_session as @code_session" do
        CodeSession.stub(:find) { mock_code_session(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:code_session).should be(mock_code_session)
      end

      it "redirects to the code_session" do
        CodeSession.stub(:find) { mock_code_session(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(code_session_url(mock_code_session))
      end
    end

    describe "with invalid params" do
      it "assigns the code_session as @code_session" do
        CodeSession.stub(:find) { mock_code_session(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:code_session).should be(mock_code_session)
      end

      it "re-renders the 'edit' template" do
        CodeSession.stub(:find) { mock_code_session(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested code_session" do
      CodeSession.stub(:find).with("37") { mock_code_session }
      mock_code_session.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the code_sessions list" do
      CodeSession.stub(:find) { mock_code_session }
      delete :destroy, :id => "1"
      response.should redirect_to(code_sessions_url)
    end
  end

end
